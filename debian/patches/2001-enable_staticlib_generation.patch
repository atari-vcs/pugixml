Description: Enable both static and shared library building
 By default the upstream builds only static library if a
 BUILD_SHARED_LIBS is not set and if it is set it only builds only
 shared library. This patch allows building both static and shared
 library.
 .
 Additionally when both shared and static libs were built there was
 conflict of name as upstream was using same name for both. This patch
 also handles this.
 .
 Upstream naming conventions for library and SONAME was not as
 required by d-shlibs this patch also fixes it.
Author: Vasudev Kamath <kamathvasudev@gmail.com>
Forwarded: not-needed
Last-Update: 2015-10-02
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -36,11 +36,13 @@ if(DEFINED BUILD_DEFINES)
 	endforeach()
 endif()
 
-if(BUILD_SHARED_LIBS)
-	add_library(pugixml SHARED ${HEADERS} ${SOURCES})
-else()
-	add_library(pugixml STATIC ${HEADERS} ${SOURCES})
-endif()
+add_library(pugixml SHARED ${HEADERS} ${SOURCES})
+set_target_properties(pugixml PROPERTIES OUTPUT_NAME pugixml)
+set_target_properties(pugixml PROPERTIES LINKER_LANGUAGE CXX)
+
+add_library(pugixml-static STATIC ${HEADERS} ${SOURCES})
+set_target_properties(pugixml-static PROPERTIES OUTPUT_NAME pugixml)
+set_target_properties(pugixml-static PROPERTIES LINKER_LANGUAGE CXX)
 
 # Export symbols for shared library builds
 if(BUILD_SHARED_LIBS AND MSVC)
@@ -64,7 +66,7 @@ target_include_directories(pugixml PUBLI
 	$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src>
 	$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}${INSTALL_SUFFIX}>)
 
-install(TARGETS pugixml EXPORT pugixml-config
+install(TARGETS pugixml pugixml-static EXPORT pugixml-config
 	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}${INSTALL_SUFFIX}
 	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${INSTALL_SUFFIX}
 	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
